{"version":3,"sources":["../../src/user/model.js"],"names":["Schema","mongoose","name","first","String","last","description","email","type","unique","lowercase","emailVerified","Boolean","default","password","photo","data","Buffer","contentType","pre","next","user","bcrypt","genSalt","err","salt","hash","methods","comparedPassword","candidatePassword","cb","compare","good","model"],"mappings":";;;;;;AACA;;;;AACA;;;;;;AAEA;AAJA;AAKA,IAAMA,SAAS,IAAIC,mBAASD,MAAb,CAAoB;AAC/BE,UAAM;AACFC,eAAOC,MADL;AAEFC,cAAMD;AAFJ,KADyB;AAK/BE,iBAAaF,MALkB;AAM/BG,WAAO;AACHC,cAAMJ,MADH;AAEHK,gBAAQ,IAFL;AAGHC,mBAAW;AAHR,KANwB;AAW/BC,mBAAe;AACXH,cAAMI,OADK;AAEXC,iBAAS;AAFE,KAXgB;AAe/BC,cAAUV,MAfqB;AAgB/BW,WAAO;AACHC,cAAMC,MADH;AAEHC,qBAAad;AAFV;AAhBwB,CAApB,CAAf;;AAsBAJ,OAAOmB,GAAP,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAc;AAC7B;AACA,QAAMC,OAAO,IAAb;;AAEAC,2BAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,GAAT,EAAcC,IAAd,EAAmB;AAClC,YAAID,GAAJ,EAAS;AAAE,mBAAOJ,KAAKI,GAAL,CAAP;AAAkB;;AAE7BF,+BAAOI,IAAP,CAAYL,KAAKP,QAAjB,EAA2BW,IAA3B,EAAiC,IAAjC,EAAuC,UAASD,GAAT,EAAcE,IAAd,EAAmB;AACtD,gBAAIF,GAAJ,EAAS;AAAE,uBAAOJ,KAAKI,GAAL,CAAP;AAAmB;;AAE9BH,iBAAKP,QAAL,GAAgBY,IAAhB;AACAN;AACH,SALD;AAMH,KATD;AAUH,CAdD;;AAgBA;AACApB,OAAO2B,OAAP,CAAeC,gBAAf,GAAkC,UAASC,iBAAT,EAA4BC,EAA5B,EAAgC;AAC9DR,2BAAOS,OAAP,CAAeF,iBAAf,EAAkC,KAAKf,QAAvC,EAAiD,UAASU,GAAT,EAAcQ,IAAd,EAAmB;AAChE,YAAIR,GAAJ,EAAU;AAAE,mBAAOM,GAAGN,GAAH,CAAP;AAAe;AAC3BM,WAAG,IAAH,EAASE,IAAT;AACH,KAHD;AAIH,CALD;;AAOA;kBACe/B,mBAASgC,KAAT,CAAe,MAAf,EAAuBjC,MAAvB,C","file":"model.js","sourcesContent":["/* eslint-disable no-irregular-whitespace */\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\n\n// Define the model\nconst Schema = new mongoose.Schema({\n    name: {\n        first: String,\n        last: String,\n    },\n    description: String,\n    email: {\n        type: String,\n        unique: true,\n        lowercase: true\n    },\n    emailVerified: {\n        type: Boolean,\n        default: false\n    },\n    password: String,\n    photo: {   \n        data: Buffer,   \n        contentType: String\n    }\n})\n\nSchema.pre('save', function(next){\n    // get access to user model, then we can use user.email, user.password\n    const user = this;\n\n    bcrypt.genSalt(10, function(err, salt){\n        if (err) { return next(err) }\n\n        bcrypt.hash(user.password, salt, null, function(err, hash){\n            if (err) { return next(err); }\n\n            user.password = hash;\n            next()\n        })\n    })\n})\n\n// Make use of methods for comparedPassword\nSchema.methods.comparedPassword = function(candidatePassword, cb) {\n    bcrypt.compare(candidatePassword, this.password, function(err, good){\n        if (err ) { return cb(err)}\n        cb(null, good);\n    })\n}\n\n// Export the model\nexport default mongoose.model('User', Schema);"]}