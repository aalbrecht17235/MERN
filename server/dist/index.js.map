{"version":3,"sources":["../src/index.js"],"names":["process","env","JWT_SECRET","err","Error","console","error","app","mongoose","connect","config","uri","useMongoClient","catch","Promise","global","router","require","Router","use","bodyParser","json","urlencoded","extended","get","req","res","send","post","Authentication","signup","signin","Middlewares","loginRequired","UserRouter","next","log","message","status","port","PORT","http","createServer","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAG,CAACA,QAAQC,GAAR,CAAYC,UAAhB,EAA4B;AACxB,QAAMC,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAZ;AACAC,YAAQC,KAAR,CAAcH,GAAd;AACH;;AAED,IAAMI,MAAM,wBAAZ;;AAEAC,mBAASC,OAAT,CAAiBC,iBAAOF,QAAP,CAAgBG,GAAjC,EAAsC,EAAEC,gBAAgB,IAAlB,EAAtC,EACCC,KADD,CACO;AAAA,WAAKR,QAAQC,KAAR,CAAcH,GAAd,CAAL;AAAA,CADP;;AAGAK,mBAASM,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA,IAAME,SAASC,QAAQ,SAAR,EAAmBC,MAAnB,EAAf;;AAGA;AACAX,IAAIY,GAAJ,CAAQ,qBAAR;AACAZ,IAAIY,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAZ,IAAIY,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;AACAd,IAAIY,GAAJ,CAAQC,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAP,OAAOQ,GAAP,CAAW,OAAX,EAAoB,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,MAAT,CAAd;AAAA,CAApB;AACAX,OAAOQ,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIL,IAAJ,CAAS,EAAC,UAAU,gBAAX,EAAT,CAAd;AAAA,CAAhB;AACAL,OAAOY,IAAP,CAAY,SAAZ,EAAuBC,yBAAeC,MAAtC;AACAd,OAAOY,IAAP,CAAY,SAAZ,EAAuBC,yBAAeE,MAAtC;AACAf,OAAOQ,GAAP,CAAW,YAAX,EAAyBQ,sBAAYC,aAArC,EAAoD,UAACR,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,WAAT,CAAd;AAAA,CAApD;AACAX,OAAOG,GAAP,CAAW,OAAX,EAAoBa,sBAAYC,aAAhC,EAA+CC,gBAA/C;;AAEA3B,IAAIY,GAAJ,CAAQ,UAAChB,GAAD,EAAMsB,GAAN,EAAWC,GAAX,EAAgBS,IAAhB,EAAyB;AAC7B9B,YAAQ+B,GAAR,CAAY,QAAZ,EAAsBjC,IAAIkC,OAA1B;AACAX,QAAIY,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBlB,IAAIkC,OAAzB;AACH,CAHD;;AAKA;AACA,IAAME,OAAOvC,QAAQC,GAAR,CAAYuC,IAAZ,IAAoB,IAAjC;AACAC,eAAKC,YAAL,CAAkBnC,GAAlB,EAAuBoC,MAAvB,CAA8BJ,IAA9B,EAAoC,YAAI;AACpClC,YAAQ+B,GAAR,uCAAgDG,IAAhD;AACH,CAFD","file":"index.js","sourcesContent":["\nimport express from 'express';\nimport http from 'http';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport config from './config';\nimport Middlewares from './api/middlewares'\nimport Authentication from './api/authentication'\nimport UserRouter from './user/router'\n\nif(!process.env.JWT_SECRET) {\n    const err = new Error('No JWT_SECRET in env variable');\n    console.error(err);\n}\n\nconst app = express();\n\nmongoose.connect(config.mongoose.uri, { useMongoClient: true })\n.catch(err=>console.error(err));\n\nmongoose.Promise = global.Promise;\n\nconst router = require('express').Router()\n\n\n// App Setup\napp.use(cors());\napp.use(morgan('dev'));\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({extended: false}));\nrouter.get('/ping', (req, res) => res.send('pong'))\nrouter.get('/', (req, res) => res.json({'source': 'MERN Stack app'}))\nrouter.post('/signup', Authentication.signup)\nrouter.post('/signin', Authentication.signin)\nrouter.get('/auth-ping', Middlewares.loginRequired, (req, res) => res.send('connected'))\nrouter.use('/user', Middlewares.loginRequired, UserRouter)\n\napp.use((err, req, res, next) => {\n    console.log('Error:', err.message);\n    res.status(422).json(err.message);\n});\n\n// Server Setup\nconst port = process.env.PORT || 8000\nhttp.createServer(app).listen(port, ()=>{\n    console.log(`\\x1b[32m`, `Server listening on: ${port}`, `\\x1b[0m`)\n});\n"]}